---
global:
  serviceAccountName: "sa-dagster"

####################################################################################################
# Dagster Webserver: Configuration for the Dagster webserver
####################################################################################################
dagsterWebserver:
  replicaCount: 1
  image:
    # When a tag is not supplied for a Dagster provided image,
    # it will default as the Helm chart version.
    repository: "docker.io/dagster/dagster-celery-k8s"
    tag: "1.4.3"
    pullPolicy: "IfNotPresent"
  workspace:
    enabled: true
    servers:
      - host: "medallion-air.air.svc"
        port: 4266
        name: "domain-air"
      - host: "medallion-weather.weather.svc"
        port: 4266
        name: "domain-weather"
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "750m"
      memory: "1Gi"
  readinessProbe:
    httpGet:
      path: "/server_info"
      port: 80
    periodSeconds: 20
    timeoutSeconds: 10
    successThreshold: 1
    failureThreshold: 3

####################################################################################################
# User Code Deployments: Configuration for user code containers to be loaded via GRPC server. For
# each item in the "deployments" list, a K8s Deployment and K8s Service will be created to run the
# GRPC server that the Dagster webserver communicates with to get definitions information and the current
# image information. These deployments can be updated independently of the Dagster webserver, and the webserver
# will pull the current image for all execution. When using a distributed executor (such as
# Celery-K8s) for job execution, the current image will be queried once and used for all
# op executions for that run. In order to guarantee that all op executions within a job
# execution use the same image, we recommend using a unique tag (ie not "latest").
#
# All user code will be invoked within the images.
####################################################################################################
dagster-user-deployments:
  enabled: true
  enableSubchart: false

####################################################################################################
# Pipeline Run: Configuration for user code containers.
#
# `DAGSTER_K8S_PIPELINE_RUN_IMAGE` environment variable will point to the image specified below.
# The run config for the celery executor can set `job_image` to fetch from environment variable
# `DAGSTER_K8S_PIPELINE_RUN_IMAGE`, so that celery workers will launch k8s jobs with said image.
#
####################################################################################################
pipelineRun:
  image:
    # When a tag is not supplied for a Dagster provided image,
    # it will default as the Helm chart version.
    repository: "docker.io/dagster/user-code-example"
    tag: "1.4.3"
    pullPolicy: "IfNotPresent"

####################################################################################################
# Run Launcher: Configuration for run launcher
####################################################################################################
runLauncher:
  # Type can be one of [K8sRunLauncher, CeleryK8sRunLauncher, CustomRunLauncher]
  type: K8sRunLauncher

  config:
    # This configuration will only be used if the K8sRunLauncher is selected
    k8sRunLauncher:
      # Change with caution! If you're using a fixed tag for pipeline run images, changing the
      # image pull policy to anything other than "Always" will use a cached/stale image, which is
      # almost certainly not what you want.
      imagePullPolicy: "IfNotPresent"
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 250m
          memory: 512Mi

####################################################################################################
# PostgreSQL: Configuration values for postgresql
#
# https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
#
# A PostgreSQL database is required to run Dagster on Kubernetes. If postgresql.enabled is marked as
# false, the PG credentials specified here will still be used, and should point to an external PG
# database that is accessible from this chart.
####################################################################################################
postgresql:
  enabled: true
  image:
    repository: "library/postgres"
    tag: "14.6"
    pullPolicy: "IfNotPresent"
  postgresqlHost: "dagster-postgresql.dagster.svc"
  postgresqlUsername: dagster
  postgresqlPassword: dagster
  postgresqlDatabase: dagster
  postgresqlScheme: "postgresql"
  service:
    port: 5432
generatePostgresqlPasswordSecret: true
generateCeleryConfigSecret: true

####################################################################################################
# Dagster Daemon (Optional) Deploy a daemon for launching queued runs and running schedules and
# sensors.
#
# By default, this daemon is included in your deployment and used to run schedules and sensors.
# Setting `enabled` to false will stop the daemon from being included in your deployment.
#
# Each thread in the daemon periodically sends heartbeats to indicate that it is still running.
# Setting `heartbeatTolerance` lets you configure how long each thread can run without sending
# a heartbeat before the daemon determines that one must be hanging and restarts the process.
#
# Setting `config.queuedRunCoordinator.maxConcurrentRuns` in `runCoordinator` allows you to set
# limits on the total number of runs that can execute at once.
####################################################################################################
dagsterDaemon:
  enabled: true

  image:
    repository: "docker.io/dagster/dagster-celery-k8s"
    tag: "1.4.3"
    pullPolicy: "IfNotPresent"
  resources:
    requests:
      cpu: "250m"
      memory: "500Mi"
    limits:
      cpu: "250m"
      memory: "500Mi"

  heartbeatTolerance: 300

  runCoordinator:
    enabled: true
    type: QueuedRunCoordinator
    config:
      queuedRunCoordinator:
        maxConcurrentRuns: ~
        tagConcurrencyLimits: []
        dequeueIntervalSeconds: ~
        dequeueUseThreads: true
        dequeueNumWorkers: 4
  runMonitoring:
    enabled: true
    startTimeoutSeconds: 300
    pollIntervalSeconds: 120
    maxResumeRunAttempts: 1
    freeSlotsAfterRunEndSeconds: 0

  runRetries:
    enabled: true
    maxRetries: 0

  sensors:
    useThreads: true
    numWorkers: 4

  schedules:
    useThreads: true
    numWorkers: 4

####################################################################################################
# As an open source project, we collect usage statistics to better understand how users engage
# with Dagster and to inform development priorities.
#
# Telemetry data will motivate projects such as adding functionality in frequently-used parts of
# the product and will help us understand adoption of new features.
#
# For more details, see:
# https://docs.dagster.io/getting-started/telemetry
####################################################################################################
telemetry:
  enabled: false

serviceAccount:
  create: false

####################################################################################################
# Sets a data retention policy for data types such as schedule / sensor ticks.
#
# For more details, see:
# https://docs.dagster.io/deployment/dagster-instance#data-retention
####################################################################################################
retention:
  enabled: false
  schedule:
    purgeAfterDays: 1
  sensor:
    purgeAfterDays:
      failure: -1
      skipped: 3
      started: 3
      success: 3
