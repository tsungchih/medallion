---
# nameOverride: dask
# fullnameOverride: dask

scheduler:
  name: scheduler # Dask scheduler name.
  enabled: true # Enable/disable scheduler.
  image:
    repository: "ghcr.io/dask/dask" # Container image repository.
    tag: "2023.1.0" # Container image tag.
    pullPolicy: IfNotPresent # Container image pull policy.
    pullSecrets: # Container image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/).
    #  - name: regcred
  replicas: 1 # Number of schedulers (should always be 1).
  serviceType: "ClusterIP" # Scheduler service type. Set to `LoadBalancer` to expose outside of your cluster.
  # serviceType: "NodePort"
  # serviceType: "LoadBalancer"
  loadBalancerIP: null # Some cloud providers allow you to specify the loadBalancerIP when using the `LoadBalancer` service type. If your cloud does not support it this option will be ignored.
  servicePort: 8786 # Scheduler service internal port.
  serviceAnnotations: {} # Scheduler service annotations.
  extraArgs:
    [] # Extra CLI arguments to be passed to the scheduler
    # - --preload
    # - scheduler-setup.py
  resources:
    limits:
      cpu: "500m"
      memory: 2G
    requests:
      cpu: "250m"
      memory: 500M
  tolerations: [] # Tolerations.
  affinity: {} # Container affinity.
  nodeSelector: {} # Node Selector.
  securityContext: {} # Security Context.
  # serviceAccountName: ""
  livenessProbe:
     httpGet:
       path: /health
       port: 8787
     initialDelaySeconds: 3
     periodSeconds: 10
  readinessProbe:
     httpGet:
       path: /status
       port: 8787
     initialDelaySeconds: 3
     periodSeconds: 10

webUI:
  name: webui # Dask webui name.
  servicePort: 80 # webui service internal port.
  ingress:
    enabled: false # Enable ingress.
    # ingressClassName:
    pathType: Prefix # set pathType in ingress
    tls: false # Ingress should use TLS.
    # secretName: dask-scheduler-tls
    hostname: dask-ui.example.com # Ingress hostname.
    annotations:
      {} # Ingress annotations. See `values.yaml` for example values.
      # kubernetes.io/ingress.class: "nginx"
      # secretName: my-tls-cert
      # kubernetes.io/tls-acme: "true"

worker:
  name: worker # Dask worker name.
  image:
    repository: "ghcr.io/dask/dask" # Container image repository.
    tag: "2023.1.0" # Container image tag.
    pullPolicy: IfNotPresent # Container image pull policy.
    dask_worker: "dask-worker" # Dask worker command. E.g `dask-cuda-worker` for GPU worker.
    pullSecrets: # Container image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/).
    #  - name: regcred
  replicas: 1 # Number of workers.
  strategy:
    type: RollingUpdate # Strategy used to replace old Pods with new ones.
  custom_scheduler_url: null # connect to already existing scheduler, deployed not by this chart.
  env: # Environment variables. See `values.yaml` for example values.
  #  - name: EXTRA_APT_PACKAGES
  #    value: build-essential openssl
  #  - name: EXTRA_CONDA_PACKAGES
  #    value: numba xarray -c conda-forge
    - name: EXTRA_PIP_PACKAGES
      value: dagster-dask dagster-postgres dagster-k8s dagster-pandera dagster-gcp --upgrade
    - name: DAGSTER_PG_PASSWORD
      value: dagster
  extraArgs:
    [] # Extra CLI arguments to be passed to the worker
    # - --preload
    # - worker-setup.py
  resources:
    limits:
      cpu: 1
      memory: 3G
  #    nvidia.com/gpu: 1
    requests:
      cpu: 1
      memory: 3G
  #    nvidia.com/gpu: 1
  mounts: {} # Worker Pod volumes and volume mounts, mounts.volumes follows kuberentes api v1 Volumes spec. mounts.volumeMounts follows kubernetesapi v1 VolumeMount spec
  #  volumes:
  #    - name: data
  #      emptyDir: {}
  #  volumeMounts:
  #    - name: data
  #      mountPath: /data
  annotations: {} # Annotations
  tolerations: [] # Tolerations.
  affinity: {} # Container affinity.
  nodeSelector: {} # Node Selector.
  securityContext: {} # Security Context.
  # serviceAccountName: ""
  # port: ""
  portDashboard: 8790 # Worker dashboard and metrics port.
  #  this option overrides "--nthreads" on workers, which defaults to resources.limits.cpu / default_resources.limits.cpu
  #  use it if you need to limit the amount of threads used by multicore workers, or to make workers with non-whole-number cpu limits
  # threads_per_worker: 1
  livenessProbe: {}
  #   httpGet:
  #     path: /health
  #     port: 8790 # The same as portDashboard
  #   initialDelaySeconds: 3
  #   periodSeconds: 10
  readinessProbe: {}
  #   httpGet:
  #     path: /status
  #     port: 8790 # The same as portDashboard
  #   initialDelaySeconds: 3
  #   periodSeconds: 10

additional_worker_groups: [] # Additional groups of workers to create. List of groups with same options as `worker`.
# - name: high-mem  # Dask worker group name.
#   extraArgs:
#     - --resources
#     - "MEMORY=6e9"
#   resources:
#     limits:
#       memory: 32G
#     requests:
#       memory: 32G
# ...
# (Defaults will be taken from the primary worker configuration)

jupyter:
  name: jupyter # Jupyter name.
  enabled: false # Enable/disable the bundled Jupyter notebook.
  rbac: true # Create RBAC service account and role to allow Jupyter pod to scale worker pods and access logs.
  image:
    repository: "ghcr.io/dask/dask-notebook" # Container image repository.
    tag: "2023.1.0" # Container image tag.
    pullPolicy: IfNotPresent # Container image pull policy.
    pullSecrets: # Container image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/).
    #  - name: regcred
    #
  serviceType: "ClusterIP" # Scheduler service type. Set to `LoadBalancer` to expose outside of your cluster.
  # serviceType: "NodePort"
  # serviceType: "LoadBalancer"
  servicePort: 80 # Jupyter service internal port.
  # This hash corresponds to the password 'dask'
  password: "sha1:aae8550c0a44:9507d45e087d5ee481a5ce9f4f16f37a0867318c" # Password hash. Default hash corresponds to the password `dask`.
  env: # Environment variables. See `values.yaml` for example values.
  #  - name: EXTRA_CONDA_PACKAGES
  #    value: "numba xarray -c conda-forge"
  #  - name: EXTRA_PIP_PACKAGES
  #    value: "s3fs dask-ml --upgrade"
  command: null # Container command.
  args: # Container arguments.
  #  - "start.sh"
  #  - "jupyter"
  #  - "lab"
  extraConfig: |-
    # Extra Jupyter config goes here
    # E.g
    # c.NotebookApp.port = 8888
  resources:
    limits:
      cpu: 250m
      memory: 1G
    requests:
      cpu: 250m
      memory: 1G
  mounts: {} # Worker Pod volumes and volume mounts, mounts.volumes follows kuberentes api v1 Volumes spec. mounts.volumeMounts follows kubernetesapi v1 VolumeMount spec
  #  volumes:
  #    - name: data
  #      emptyDir: {}
  #  volumeMounts:
  #    - name: data
  #      mountPath: /data
  tolerations: [] # Tolerations.
  affinity: {} # Container affinity.
  nodeSelector: {} # Node Selector.
  securityContext: {} # Security Context.
  serviceAccountName: "dask-jupyter" # Service account for use with RBAC
  ingress:
    enabled: false # Enable ingress.
    # ingressClassName:
    tls: false # Ingress should use TLS.
    # secretName: dask-jupyter-tls
    pathType: Prefix # set pathType in ingress
    hostname: dask-jupyter.example.com # Ingress hostname.
    annotations:
      {} # Ingress annotations. See `values.yaml` for example values.
      # kuernetesbernetes.io/ingress.class: "nginx"
      # secretName: my-tls-cert
      # kub.io/tls-acme: "true"
  livenessProbe:
     httpGet:
       path: /login
       port: 8888
     initialDelaySeconds: 3
     periodSeconds: 10
  readinessProbe:
     httpGet:
       path: /login
       port: 8888
     initialDelaySeconds: 3
     periodSeconds: 10

